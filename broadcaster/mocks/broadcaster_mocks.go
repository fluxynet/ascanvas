// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"

	ascanvas "github.com/fluxynet/ascanvas"

	mock "github.com/stretchr/testify/mock"
)

// CanvasBroadcaster is an autogenerated mock type for the CanvasBroadcaster type
type CanvasBroadcaster struct {
	mock.Mock
}

// Broadcast provides a mock function with given fields: ctx, event
func (_m *CanvasBroadcaster) Broadcast(ctx context.Context, event ascanvas.CanvasEvent) error {
	ret := _m.Called(ctx, event)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, ascanvas.CanvasEvent) error); ok {
		r0 = rf(ctx, event)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Observe provides a mock function with given fields: ctx, id
func (_m *CanvasBroadcaster) Observe(ctx context.Context, id string) (ascanvas.StopObserveFunc, <-chan ascanvas.CanvasEvent, error) {
	ret := _m.Called(ctx, id)

	var r0 ascanvas.StopObserveFunc
	if rf, ok := ret.Get(0).(func(context.Context, string) ascanvas.StopObserveFunc); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ascanvas.StopObserveFunc)
		}
	}

	var r1 <-chan ascanvas.CanvasEvent
	if rf, ok := ret.Get(1).(func(context.Context, string) <-chan ascanvas.CanvasEvent); ok {
		r1 = rf(ctx, id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(<-chan ascanvas.CanvasEvent)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, id)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}
