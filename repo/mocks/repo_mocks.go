// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"

	ascanvas "github.com/fluxynet/ascanvas"

	mock "github.com/stretchr/testify/mock"
)

// CanvasRepository is an autogenerated mock type for the CanvasRepository type
type CanvasRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, canvas
func (_m *CanvasRepository) Create(ctx context.Context, canvas ascanvas.Canvas) error {
	ret := _m.Called(ctx, canvas)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, ascanvas.Canvas) error); ok {
		r0 = rf(ctx, canvas)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, id
func (_m *CanvasRepository) Delete(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, id
func (_m *CanvasRepository) Get(ctx context.Context, id string) (*ascanvas.Canvas, error) {
	ret := _m.Called(ctx, id)

	var r0 *ascanvas.Canvas
	if rf, ok := ret.Get(0).(func(context.Context, string) *ascanvas.Canvas); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ascanvas.Canvas)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx
func (_m *CanvasRepository) List(ctx context.Context) ([]ascanvas.Canvas, error) {
	ret := _m.Called(ctx)

	var r0 []ascanvas.Canvas
	if rf, ok := ret.Get(0).(func(context.Context) []ascanvas.Canvas); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ascanvas.Canvas)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, canvas
func (_m *CanvasRepository) Update(ctx context.Context, canvas ascanvas.Canvas) error {
	ret := _m.Called(ctx, canvas)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, ascanvas.Canvas) error); ok {
		r0 = rf(ctx, canvas)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
